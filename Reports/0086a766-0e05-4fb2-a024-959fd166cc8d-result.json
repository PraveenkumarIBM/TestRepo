{"name": "test_TC01_documentprocessing_for_pdf_with_doctype_invpo[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[contains(text(),'20240508_CI00000008')]\"}\n  (Session info: chrome=124.0.6367.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF625311522+60802]\n\t(No symbol) [0x00007FF62528AC22]\n\t(No symbol) [0x00007FF625147CE4]\n\t(No symbol) [0x00007FF625196D4D]\n\t(No symbol) [0x00007FF625196E1C]\n\t(No symbol) [0x00007FF6251DCE37]\n\t(No symbol) [0x00007FF6251BABBF]\n\t(No symbol) [0x00007FF6251DA224]\n\t(No symbol) [0x00007FF6251BA923]\n\t(No symbol) [0x00007FF625188FEC]\n\t(No symbol) [0x00007FF625189C21]\n\tGetHandleVerifier [0x00007FF6256141BD+3217949]\n\tGetHandleVerifier [0x00007FF625656157+3488183]\n\tGetHandleVerifier [0x00007FF62564F0DF+3459391]\n\tGetHandleVerifier [0x00007FF6253CB8E6+823622]\n\t(No symbol) [0x00007FF625295FBF]\n\t(No symbol) [0x00007FF625290EE4]\n\t(No symbol) [0x00007FF625291072]\n\t(No symbol) [0x00007FF6252818C4]\n\tBaseThreadInitThunk [0x00007FFF3C86257D+29]\n\tRtlUserThreadStart [0x00007FFF3CB0AA48+40]", "trace": "self = <Sanity.test_TC02_VerifyE2EFunctionalityForPODocumentType.Test_VerifyE2EFunctionalityforINVPO object at 0x000001CF5B808EB0>\n\n    def test_TC01_documentprocessing_for_pdf_with_doctype_invpo(self):\n        print(\"hello pytest\")\n        #Login verification\n        loginverification = LoginpageVerification(self.driver)\n        loginverification.test_loginpage_verification()\n        # invoice Search\n        invoicesearch = InvoiceSearchClick(self.driver)\n>       invoicesearch.test_invoicesearch_click()\n\ntestCases\\CI\\Sanity\\test_TC02_VerifyE2EFunctionalityForPODocumentType.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pytest\\Functions\\InvoiceSearchClick.py:26: in test_invoicesearch_click\n    invoiceispresent = self.driver.find_element(By.XPATH, \"//span[contains(text(),'\"+Login['D2'].value+\"')]\")\n..\\..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CF5B83F490>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF6252818C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF3C86257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF3CB0AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[contains(text(),'20240508_CI00000008')]\"}\nE         (Session info: chrome=124.0.6367.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF625311522+60802]\nE       \t(No symbol) [0x00007FF62528AC22]\nE       \t(No symbol) [0x00007FF625147CE4]\nE       \t(No symbol) [0x00007FF625196D4D]\nE       \t(No symbol) [0x00007FF625196E1C]\nE       \t(No symbol) [0x00007FF6251DCE37]\nE       \t(No symbol) [0x00007FF6251BABBF]\nE       \t(No symbol) [0x00007FF6251DA224]\nE       \t(No symbol) [0x00007FF6251BA923]\nE       \t(No symbol) [0x00007FF625188FEC]\nE       \t(No symbol) [0x00007FF625189C21]\nE       \tGetHandleVerifier [0x00007FF6256141BD+3217949]\nE       \tGetHandleVerifier [0x00007FF625656157+3488183]\nE       \tGetHandleVerifier [0x00007FF62564F0DF+3459391]\nE       \tGetHandleVerifier [0x00007FF6253CB8E6+823622]\nE       \t(No symbol) [0x00007FF625295FBF]\nE       \t(No symbol) [0x00007FF625290EE4]\nE       \t(No symbol) [0x00007FF625291072]\nE       \t(No symbol) [0x00007FF6252818C4]\nE       \tBaseThreadInitThunk [0x00007FFF3C86257D+29]\nE       \tRtlUserThreadStart [0x00007FFF3CB0AA48+40]\n\n..\\..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "attachments": [{"name": "Dashboard Page", "source": "ff29da21-b138-4dba-90ef-7a6f477c9ed8-attachment.png", "type": "image/png"}, {"name": "log", "source": "dee867e0-1d0c-4c95-b401-a891d41d0592-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1716203066515, "stop": 1716203076049, "uuid": "934ee139-bc19-4295-8e23-fd3ef364c5e9", "historyId": "f7eb4e3069a33ed4f63e50bb5b101213", "testCaseId": "96e7ca4c8507494c3b728c6df8302d9f", "fullName": "testCases.CI.Sanity.test_TC02_VerifyE2EFunctionalityForPODocumentType.Test_VerifyE2EFunctionalityforINVPO#test_TC01_documentprocessing_for_pdf_with_doctype_invpo", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "testCases.CI.Sanity"}, {"name": "suite", "value": "test_TC02_VerifyE2EFunctionalityForPODocumentType"}, {"name": "subSuite", "value": "Test_VerifyE2EFunctionalityforINVPO"}, {"name": "host", "value": "IBM-PF33GXH6"}, {"name": "thread", "value": "20324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.CI.Sanity.test_TC02_VerifyE2EFunctionalityForPODocumentType"}]}